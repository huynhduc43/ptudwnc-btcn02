{"version":3,"sources":["components/Square.js","components/Board/Board.js","components/Game/Game.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","highlighted","className","renderSquare","pos","Board","size","squares","highlight","board","i","row","j","push","indexOf","Game","status","useState","setSize","Array","fill","clickedPos","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","selectedItem","setSelectedItem","isAscending","setIsAscending","winner","setWinner","line","setLine","sizeInput","setSizeInput","moves","map","step","move","desc","jumpTo","reverse","currentHistory","length","slice","player","winLine","result","x","y","checkPos","winPoint","point","col","Math","floor","tmpLine","calculateWinner","concat","handleClick","type","onChange","e","isNaN","target","alert","handleChangeSize","disabled","preventDefault","newSize","Number","handleApplySize","handlePlayAgain","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02294a82.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Square({ value, onClick, highlighted }) {\r\n  return (\r\n    <button className={highlighted ? \"winner-square\" : \"square\"} onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"../Square\";\r\nimport './Board.css';\r\n\r\nfunction Board({ size, squares, highlight, onClick }) {\r\n  let board = [];\r\n\r\n  if (highlight) {\r\n    for (let i = 0; i < size; i++) {\r\n      let row = [];\r\n\r\n      for (let j = i * size; j < i * size + size; j++) {\r\n        row.push(renderSquare(j, squares[j], highlight.indexOf(j) !== -1, onClick));\r\n      }\r\n\r\n      board.push(<div key={`row-${i}`} className=\"board-row\">{row}</div>);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < size; i++) {\r\n      let row = [];\r\n\r\n      for (let j = i * size; j < i * size + size; j++) {\r\n        row.push(renderSquare(j, squares[j], null, onClick));\r\n      }\r\n\r\n      board.push(<div key={`row-${i}`} className=\"board-row\">{row}</div>);\r\n    }\r\n  }\r\n\r\n  return board;\r\n}\r\n\r\n/**\r\n * Render a square with value X | O | null and highlight win square\r\n * @param {*} pos position of square in squares list\r\n * @param {*} value value of a square to display in position pos\r\n * @param {*} highlighted true if game have a winner\r\n * @param {*} onClick handle click event in a square\r\n * @returns {JSX.Element} Square component\r\n */\r\n\r\nfunction renderSquare(pos, value, highlighted, onClick) {\r\n  return (\r\n    <Square\r\n      key={pos}\r\n      value={value}\r\n      onClick={() => onClick(pos)}\r\n      highlighted={highlighted}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Board;","import React, { useState } from \"react\";\r\nimport Board from \"../Board/Board\";\r\nimport './Game.css';\r\n\r\nfunction Game() {\r\n  const [size, setSize] = useState(5);\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(25).fill(null),\r\n      clickedPos: \"\",\r\n    }\r\n  ]);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [selectedItem, setSelectedItem] = useState(-1);\r\n  const [isAscending, setIsAscending] = useState(true);\r\n  const [winner, setWinner] = useState(null);\r\n  const [line, setLine] = useState([]);\r\n  const [sizeInput, setSizeInput] = useState(\"5\");\r\n\r\n  let moves = history.map((step, move) => {\r\n    const desc = move ?\r\n      'Go to move #' + move + \": \" + step.clickedPos :\r\n      'Go to game start';\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move, setStepNumber, setXIsNext, setWinner, setSelectedItem)}>\r\n          {move === selectedItem ? <b>{desc}</b> : desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  if (!isAscending) moves = moves.reverse();\r\n\r\n  let status;\r\n\r\n  if (winner) {\r\n    status = 'Winner: ' + winner;\r\n  } else if (stepNumber === size * size) {\r\n    status = 'Draw';\r\n  } else {\r\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          size={size}\r\n          squares={history[stepNumber].squares}\r\n          onClick={(i) => {\r\n            const currentHistory = history.slice(0, stepNumber + 1);\r\n            handleClick(i, currentHistory, winner, xIsNext, size,\r\n              setHistory, setXIsNext, setStepNumber, setSelectedItem, setWinner, setLine);\r\n          }}\r\n          highlight={winner ? line : null}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <form>\r\n          <div>\r\n            {\"Size of board: \"}\r\n            <input\r\n              className=\"size-input\"\r\n              type=\"text\" value={sizeInput}\r\n              onChange={(e) => handleChangeSize(e, setSizeInput)}\r\n            />\r\n            {\" x \"}\r\n            <input\r\n              className=\"size-input\"\r\n              value={sizeInput}\r\n              disabled\r\n            />\r\n            <button type=\"submit\" className=\"submit-btn\"\r\n              onClick={(e) => handleApplySize(\r\n                e, sizeInput, size,\r\n                setSizeInput, setSize, setHistory, setStepNumber, setWinner, setXIsNext, setSelectedItem, setLine\r\n              )}\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <h2>{status}</h2>\r\n        {(winner || stepNumber === size * size) &&\r\n          <button onClick={() =>\r\n            handlePlayAgain(size, setHistory, setStepNumber, setWinner, setXIsNext, setSelectedItem, setIsAscending, setLine)}\r\n          >\r\n            Play again\r\n          </button>}\r\n        <div className=\"sort-div\">Sort: <button\r\n          onClick={() => setIsAscending(!isAscending)}\r\n        >\r\n          {isAscending ? \"Ascending\" : \"Descending\"}\r\n        </button>\r\n        </div>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Handle click event with a square in a round\r\n * @param {*} i position of square\r\n * @param {*} currentHistory board with clicked position in a current round\r\n * @param {*} winner not null ('X' or 'O') if game have a winner\r\n * @param {*} xIsNext true if the next player is player X\r\n * @param {*} size size of board\r\n * @param {*} setHistory \r\n * @param {*} setXIsNext \r\n * @param {*} setStepNumber \r\n * @param {*} setSelectedItem \r\n * @param {*} setWinner \r\n * @param {*} setLine \r\n * @returns \r\n */\r\n\r\nfunction handleClick(\r\n  i, currentHistory, winner, xIsNext, size,\r\n  setHistory, setXIsNext, setStepNumber, setSelectedItem, setWinner, setLine\r\n) {\r\n  const currentBoard = currentHistory[currentHistory.length - 1];\r\n  const squares = currentBoard.squares.slice();\r\n\r\n  if (winner || squares[i]) {\r\n    return;\r\n  }\r\n\r\n  squares[i] = xIsNext ? 'X' : 'O';\r\n  let player = null;\r\n  let winLine = [];\r\n  let result = calculateWinner(squares, size, i);\r\n\r\n  if (result) {\r\n    player = result.player;\r\n    winLine = [...result.line];\r\n  }\r\n\r\n  const col = i % size + 1;\r\n  const row = Math.floor(i / size) + 1;\r\n\r\n  setHistory(\r\n    currentHistory.concat([{\r\n      squares: squares,\r\n      clickedPos: `(${col}, ${row})`,\r\n    }])\r\n  );\r\n  setXIsNext(!xIsNext);\r\n  setStepNumber(currentHistory.length);\r\n  setSelectedItem(currentHistory.length);\r\n  setWinner(player);\r\n  setLine([...winLine]);\r\n}\r\n\r\n/**\r\n * Jump to the chosen turn in the game's history\r\n * @param {*} step the chosen turn\r\n * @param {*} setStepNumber \r\n * @param {*} setXIsNext \r\n * @param {*} setWinner \r\n * @param {*} setSelectedItem \r\n */\r\n\r\nfunction jumpTo(step, setStepNumber, setXIsNext, setWinner, setSelectedItem) {\r\n  setStepNumber(step);\r\n  setXIsNext((step % 2) === 0);\r\n  setWinner(null);\r\n  setSelectedItem(step);\r\n}\r\n\r\n/**\r\n * Check for a winner and there are no more turns to make\r\n * @param {*} squares current board\r\n * @param {*} size size of board\r\n * @param {*} pos position of the newest clicked square\r\n * @returns null or object: {player: the winner, line: line of winner}\r\n */\r\n\r\nfunction calculateWinner(squares, size, pos) {\r\n  const winPoint = size >= 5 ? 4 : size - 1;\r\n  let point = 0;\r\n  let col = pos % size;\r\n  let row = Math.floor(pos / size);\r\n  let x, y, checkPos;\r\n  let line = [];\r\n  let tmpLine = [];\r\n\r\n  // Kiểm tra chiến thắng theo cột\r\n  // Các điểm phía dưới điểm vừa đánh \r\n  x = row + 1;\r\n  y = col;\r\n  checkPos = x * size + y;\r\n\r\n  while (x < size && squares[checkPos] === squares[pos]) {\r\n    point += 1;\r\n    x += 1;\r\n    tmpLine.push(checkPos);\r\n    checkPos = x * size + y;\r\n  }\r\n\r\n  // Các điểm phía trên điểm vừa đánh\r\n  x = row - 1;\r\n  checkPos = x * size + y;\r\n\r\n  while (x >= 0 && squares[checkPos] === squares[pos]) {\r\n    point += 1;\r\n    x -= 1;\r\n    tmpLine.push(checkPos);\r\n    checkPos = x * size + y;\r\n  }\r\n\r\n  if (point >= winPoint) {\r\n    line = [...line, ...tmpLine];\r\n  }\r\n\r\n  // Kiểm tra chiến thắng theo hàng\r\n  // Các điểm bên trái điểm vừa đánh\r\n  point = 0\r\n  x = row;\r\n  y = col + 1;\r\n  tmpLine = [];\r\n  checkPos = x * size + y;\r\n\r\n  while (y < size && squares[checkPos] === squares[pos]) {\r\n    point += 1;\r\n    y += 1;\r\n    tmpLine.push(checkPos);\r\n    checkPos = x * size + y;\r\n  }\r\n\r\n  // Các điểm bên phải điểm vừa đánh\r\n  y = col - 1;\r\n  checkPos = x * size + y;\r\n\r\n  while (y >= 0 && squares[checkPos] === squares[pos]) {\r\n    point += 1;\r\n    y -= 1;\r\n    tmpLine.push(checkPos);\r\n    checkPos = x * size + y;\r\n  }\r\n\r\n  if (point >= winPoint) {\r\n    line = [...line, ...tmpLine];\r\n  }\r\n\r\n  // Kiểm tra chiến thắng theo đường chéo phải\r\n  // Các điểm phía dưới điểm vừa đánh\r\n  point = 0\r\n  x = row + 1;\r\n  y = col + 1;\r\n  checkPos = x * size + y;\r\n  tmpLine = [];\r\n\r\n  while (x < size && y < size && squares[checkPos] === squares[pos]) {\r\n    point += 1;\r\n    x += 1;\r\n    y += 1;\r\n    tmpLine.push(checkPos);\r\n    checkPos = x * size + y;\r\n  }\r\n\r\n  // Các điểm phía trên điểm vừa đánh\r\n  x = row - 1;\r\n  y = col - 1;\r\n  checkPos = x * size + y;\r\n\r\n  while (x >= 0 && y >= 0 && squares[checkPos] === squares[pos]) {\r\n    point += 1;\r\n    x -= 1;\r\n    y -= 1;\r\n    tmpLine.push(checkPos);\r\n    checkPos = x * size + y;\r\n  }\r\n\r\n  if (point >= winPoint) {\r\n    line = [...line, ...tmpLine];\r\n  }\r\n\r\n  // Kiểm tra chiến thắng theo đường chéo trái\r\n  // Các điểm phía dưới điểm vừa đánh\r\n  point = 0\r\n  x = row + 1;\r\n  y = col - 1;\r\n  checkPos = x * size + y;\r\n  tmpLine = [];\r\n\r\n  while (x < size && y >= 0 && squares[checkPos] === squares[pos]) {\r\n    point += 1;\r\n    x += 1;\r\n    y -= 1;\r\n    tmpLine.push(checkPos);\r\n    checkPos = x * size + y;\r\n  }\r\n\r\n  // Các điểm phía trên điểm vừa đánh\r\n  x = row - 1;\r\n  y = col + 1;\r\n  checkPos = x * size + y;\r\n\r\n  while (x >= 0 && y < size && squares[checkPos] === squares[pos]) {\r\n    point += 1;\r\n    x -= 1;\r\n    y += 1;\r\n    tmpLine.push(checkPos);\r\n    checkPos = x * size + y;\r\n  }\r\n\r\n  if (point >= winPoint) {\r\n    line = [...line, ...tmpLine];\r\n  }\r\n\r\n  if (line.length > 0) {\r\n    line.push(pos);\r\n    return {\r\n      player: squares[pos],\r\n      line: line,\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Change size of board\r\n * @param {*} e onChange event\r\n * @param {*} setSizeInput \r\n * @returns \r\n */\r\n\r\nfunction handleChangeSize(e, setSizeInput) {\r\n  if (isNaN(e.target.value)) {\r\n    alert(\"Not a number! Please try again!\");\r\n    return;\r\n  }\r\n  setSizeInput(e.target.value);\r\n}\r\n\r\n/**\r\n * Set up size of board\r\n * @param {*} e submit event\r\n * @param {*} sizeInput new size\r\n * @param {*} size current size of board\r\n * @param {*} setSizeInput \r\n * @param {*} setSize \r\n * @param {*} setHistory \r\n * @param {*} setStepNumber \r\n * @param {*} setWinner \r\n * @param {*} setXIsNext \r\n * @param {*} setSelectedItem \r\n * @param {*} setLine \r\n * @returns \r\n */\r\n\r\nfunction handleApplySize(\r\n  e, sizeInput, size,\r\n  setSizeInput, setSize, setHistory, setStepNumber, setWinner, setXIsNext, setSelectedItem, setLine\r\n) {\r\n  e.preventDefault();\r\n  const newSize = Number(sizeInput);\r\n\r\n  if (newSize < 5) {\r\n    alert(\"The size of the board must be greater than 5! Please try again!\");\r\n    setSizeInput(size);\r\n    return;\r\n  }\r\n\r\n  setSize(newSize);\r\n  setHistory([\r\n    {\r\n      squares: Array(newSize * newSize).fill(null),\r\n      clickedPos: \"\"\r\n    }\r\n  ]);\r\n  setStepNumber(0);\r\n  setWinner(null);\r\n  setXIsNext(true);\r\n  setSelectedItem(-1);\r\n  setLine([]);\r\n}\r\n\r\n/**\r\n * Reset game to play again with old size and sorting\r\n * @param {*} size size of board\r\n * @param {*} setHistory \r\n * @param {*} setStepNumber \r\n * @param {*} setWinner \r\n * @param {*} setXIsNext \r\n * @param {*} setSelectedItem \r\n * @param {*} setIsAscending \r\n * @param {*} setLine \r\n */\r\n\r\nfunction handlePlayAgain(\r\n  size, setHistory,\r\n  setStepNumber, setWinner, setXIsNext, setSelectedItem, setIsAscending, setLine\r\n) {\r\n  setHistory([\r\n    {\r\n      squares: Array(size * size).fill(null),\r\n      clickedPos: \"\"\r\n    }\r\n  ]);\r\n  setStepNumber(0);\r\n  setWinner(null);\r\n  setXIsNext(true);\r\n  setSelectedItem(-1);\r\n  setLine([]);\r\n}\r\n\r\nexport default Game;","import Game from \"../Game/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}